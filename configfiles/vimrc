set nocompatible
syntax enable

call plug#begin('~/.config/nvim/plugged')

Plug 'janko-m/vim-test'
Plug 'kassio/neoterm'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'

Plug 'tmsvg/pear-tree'
Plug 'christoomey/vim-tmux-navigator'
Plug 'epeli/slimux'

Plug 'simnalamburt/vim-mundo'
Plug 'godlygeek/tabular'

Plug 'mattn/emmet-vim'
Plug 'wellle/targets.vim'
Plug 'vim-erlang/vim-erlang-runtime'
Plug 'powerman/vim-plugin-AnsiEsc'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lualine/lualine.nvim'
Plug 'kyazdani42/nvim-web-devicons'

Plug 'justinmk/vim-dirvish'
Plug 'chriskempson/base16-vim'
Plug 'SirVer/ultisnips', { 'on': [] }

Plug 'will133/vim-dirdiff'
call plug#end()

" ultisnips is slow to load, so defer until going into insert mode
augroup load_ultisnips
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips') | autocmd! load_ultisnips
augroup END

lua <<EOF
require'lualine'.setup {
  options = {
    theme = 'jellybeans',
  },
}
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  ignore_install = {}, -- List of parsers to ignore installing
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = {},  -- list of language that will be disabled
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
require'lspconfig'.rust_analyzer.setup{}
require'lspconfig'.tsserver.setup{}
EOF

filetype plugin indent on     " required!

let $NVIM_TUI_ENABLE_TRUE_COLOR=1
colorscheme base16-chalk 

if has('termguicolors')
  set termguicolors
endif

" Workaround for C-h not working with vim-tmux-navigator in neovim
if has('nvim')
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif

" Turn on cursorline only on active window
augroup MyAutoCmd
  autocmd!
  autocmd WinLeave * setlocal nocursorline
  autocmd WinEnter,BufRead * setlocal cursorline
augroup END

set autoread
set background=dark
set backspace=indent,eol,start
set backup
set backupdir=~/.config/nvim/backup/
set directory=~/.config/nvim/swap/
set clipboard=unnamed
set complete-=i
set completeopt=menuone,longest
set cursorline
set expandtab
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set nojoinspaces
set nomodeline
set noshowmode
set nrformats-=octal
set number
set path+=**
set ruler
set scrolloff=3
set shiftwidth=2
set showcmd
set showmatch
set smartcase
set shortmess+=c
set signcolumn=yes
set smartindent
set smarttab
set splitbelow
set splitright
set switchbuf=useopen
set tabstop=2
set ttimeoutlen=50
set updatetime=300
set wildignorecase
set wildmenu
set wildmode=longest,full

if has('nvim')
  set inccommand=nosplit
endif

" Enter key selects menu item
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
" Select an item by default
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <C-x><C-l> pumvisible() ? '<C-x><C-l>' :
  \ '<C-x><C-l><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <C-x><C-o> pumvisible() ? '<C-x><C-o>' :
  \ '<C-x><C-o><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <c-e> <c-o>$
inoremap <c-a> <c-o>0

let mapleader="\<Space>"

nnoremap j gj
nnoremap k gk
" 'Stamp' over the current word with the contents of the last yanked text
nnoremap S diw"0P
vnoremap S d"0P
" Useful shortcuts for working with splits
nnoremap <silent> <Leader>h :sp<cr>
nnoremap <silent> <Leader>v :vsp<cr>
map <S-up> 2<C-w>+
map <S-down> 2<C-w>-
map <S-left> 4<C-w><
map <S-right> 4<C-w>>

nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <Leader>> :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>< :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

" Make Y follow the same pattern as C and D
map Y y$

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
inoremap <C-j> <Esc>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

"put these in an autocmd group, so that we can delete them easily.
augroup vimrcex
  autocmd!

  " for all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

augroup end

nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>
let test#strategy = 'neoterm'

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif

nnoremap <leader>rd :DiffOrig<CR>
nnoremap <leader>re :edit $MYVIMRC<CR>
nnoremap <leader>rs :source $MYVIMRC<CR>

nnoremap <leader><Space> :nohlsearch<CR>

let user_emmet_expandabbr_key = '<C-Y>y'
" custom emmet expander to split tags and open line between
imap <C-Y>o <C-Y>y<CR><C-o>O<C-i>

let g:ctrlp_open_new_file = 'r'

" dir path for current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" change current directory to that of the current file
nmap <leader>cd :cd %:p:h<CR>

nnoremap <leader>u :MundoToggle<CR>

function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction
noremap <leader>w :call StripWhitespace()<CR>

" Change default HTML indentation to include more tags
let g:html_indent_inctags = "html,body,head,tbody,p"

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="horizontal"

command! Snips :call UltiSnips#ListSnippets()

nmap <C-c><C-c> :SlimuxREPLSendLine<CR>
vmap <C-c><C-c> :SlimuxREPLSendSelection<CR>

nnoremap - :Dirvish %:p:h<CR>

function! SetTestDirs(src_dir, test_dir, src_ext, test_post, test_ext)
  let b:src_dir = a:src_dir
  let b:test_dir = a:test_dir
  let b:src_ext = a:src_ext
  let b:test_post = a:test_post
  let b:test_ext = a:test_ext
endfunction

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <leader>rf :call RenameFile()<cr>

vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>

" replace word under cursor with last yank
nmap <leader>p viw"0p

" FZF mappings
nmap <C-p> :FZF<cr>
nmap <leader>m :History<cr>
nmap <leader>b :Buffers<cr>
nmap <leader>a :Files<cr>
let g:fzf_preview_window = ''


set grepprg=rg\ --vimgrep\ --smart-case
set grepformat=%f:%l:%c:%m,%f:%l:%m

nnoremap <Leader>f :silent grep!<Space>
nnoremap gs :silent grep! <C-r><C-w><CR>:copen<CR>
xnoremap gs "sy:silent grep! <C-r>s<CR>:copen<CR>
